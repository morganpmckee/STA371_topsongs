install.packages('boot')
library(boot)
install.packages("leaps")
library(leaps) 


# pop model
selected_reg = regsubsets(pop~dB+bpm+nrgy+dnce+live+val+acous+spch,data=top10,method="backward")
plot(selected_reg, scale="r2", main="Popularity model")

summary(lm(pop~dB+bpm+nrgy+dnce+live+acous,data=top10))

set.seed(104)
validation_cases = sample(1:301, 50, replace = FALSE)
training_cases = setdiff(1:301, validation_cases)
training_set = top10[training_cases,]
validation_set = top10[validation_cases,]

pop_model = lm(pop~dB+bpm+nrgy+dnce+live+acous, data=training_set)

predicted_y = predict(pop_model, validation_set) 
mean((validation_set$pop - predicted_y)^2) # 156.3503


# live model
selected_reg = regsubsets(live~dB+bpm+nrgy+dnce+pop+val+acous+spch,data=top10,method="backward")
plot(selected_reg, scale="r2", main="Popularity model")

summary(lm(live~year+bpm+nrgy+val+pop,data=top10))

set.seed(104)
validation_cases = sample(1:301, 50, replace = FALSE)
training_cases = setdiff(1:301, validation_cases)
training_set = top10[training_cases,]
validation_set = top10[validation_cases,]

live_model = lm(live~year+bpm+nrgy+val+pop, data=training_set)

predicted_y = predict(live_model, validation_set) 
mean((validation_set$live - predicted_y)^2) # 184.6233


# bpm model
summary(lm(bpm~live+nrgy+dnce+val+pop,data=top10))
summary(lm(bpm~nrgy+dnce+pop,data=top10))

set.seed(104)
validation_cases = sample(1:301, 50, replace = FALSE)
training_cases = setdiff(1:301, validation_cases)
training_set = top10[training_cases,]
validation_set = top10[validation_cases,]

bpm_model = lm(bpm~nrgy+dnce+pop, data=training_set)

predicted_y = predict(bpm_model, validation_set) 
mean((validation_set$live - predicted_y)^2) # 10566.84 ?
